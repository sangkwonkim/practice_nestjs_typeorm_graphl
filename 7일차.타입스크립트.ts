// 학생이 작성한 리뷰 중에는 체크박스로 사전에 정의된 문장들로 표현할 수 있는 부분이 있었습니다.
// 이렇게 체크된 문장은 사용자가 직접 작성한 리뷰와는 별개로 해당 강의 별로 통계를 내어 강의 소개글에 표현됩니다.

// 서버에서는 이러한 문장을 하나의 단어로 표현해서 db에 저장하고, 클라이언트와 사전에 협의하여
// 단어에 맞는 문장을 클라이언트에서 조회하고 출력하는 방식이었습니다.

// 리뷰와 사전에 정의된 문장은 db에서 ManyToMany로 관계되어 있으며, 이를 통해 해당 리뷰에 체크된 문장들을 조회할 수 있었습니다.

// 해당 강의 별로 체크된 문장의 통계를 내기 위해서 문장 테이블에서 조회 후 카운트하는 로직을 구현하던 중,
// { 문장 표현 단어 : number, ...등등 } 형태로 리턴하는 데 리턴 타입을 정하면서 어려움이 있었습니다.

// 키값으로 정확한 단어만 들어갈 수 있도록 타입을 정할 때, | 으로 지정할 지 고민하다가 
// 피드백을 통해 partial를 알게 되었습니다.

// Partial<Type>
// Type 집합의 모든 프로퍼티를 선택적으로 타입을 생성합니다. 
// 이 유틸리티는 주어진 타입의 모든 하위 타입 집합을 나타내는 타입을 반환합니다.

// 이러한 partial로 키값으로 들어갈 값들을 선언해주며 리턴 타입을 선언했습니다.

// partial뿐만 아니라

// Record<Keys,Type>
// 타입 Type의 프로퍼티 키의 집합으로 타입을 생성합니다. 이 유틸리티는 타입의 프로퍼티를 다른 타입에 매핑 시키는데 사용될 수 있습니다.

// 예제
// interface PageInfo {
//   title: string;
// }
 
// type Page = "home" | "about" | "contact";
 
// const nav: Record<Page, PageInfo> = {
//   about: { title: "about" },
//   contact: { title: "contact" },
//   home: { title: "home" },
// };
 
// nav.about;
// const nav: Record<Page, PageInfo>

// Record를 사용해서도 구현할 수 있을 것 같습니다.

// 주말이나 저녁에 시간이 된다면 구현했던 코드를 Record를 통해서 구현해봐야겠습니다.