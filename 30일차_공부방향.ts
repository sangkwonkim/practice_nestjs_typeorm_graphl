// 입사 이후 타입스크립트나 typeorm, graphql, nestjs 등을 제외하곤 에러나 라이브러리, 프레임워크에서 사용할 부분만 간단하게 학습해왔습니다.

// 지금까지 여러 건의 에러와 기능들을 학습했지만, 동일한 에러나 기능이 아니면 동일한 라이브러리, 프레임워크 등에서 다른 기능을 학습해야 하는 일이 다반사였습니다.

// 그래서 확실하게 잘 사용한다고 말을 하기 어려워서 어떻게 학습할지가 고민이었는데, 어제 드림코딩 유튜버를 통해서 좋은 해결방안을 찾은 거 같아 학습 방법을 변경해보려고 합니다.

// 이번 컨텐츠는 깨어있음으로 성장기에 들어설 수 있는 본인의 방법을 공유하고 있습니다.

// 컨텐츠 간단 정리

// 1. '다음에'라는 말하지 않기
// 리팩토링 2판.3의 법칙 => 비슷한 일을 세 번째하게 되면 리팩토링한다
// 동일한 이슈가 3번 반복된다면 필용한 지식임을 인지하고 깊이 있게 학습하기

// 2. 깨어있기, 사고하기
// 조그마한 모듈이라도 효율적으로 구현할 수 있도록 고민하고, 해당 모듈만이 아닌 더 나은 프로젝트를 위해서 필요할 것으로 판단되는 정보들을 메모하고 기억해서 추후에 학습 일정을 잡을 수 있도록
// 항상 생각하면서 개발하기(라이브러리, 프레임워크 등도 비교하면서 계획 세우기)

// 3. 필요한 지식 정리하기
// 업무 중에 부족한 지식을 리스트로 정리하고 반복되는 것을 우선적으로 학습해보기

// 4. 학습 계획 세우기
// 백엔드 개발자로써 주력으로 해야하는 것과,
// 깃 명령어, 개발툴, 터미널 명령어 등 개발 생산성을 높여주는 것(튼튼),
// 자료구조, 알고리즘, 리팩토링 등 코드의 수준을 높일 수 있는 것(깊이)
// 이렇게 세가지로 나누어서 달 별, 분기 별로 학습하는 계획짜기
// 예시
//      월  화   수   목   금   토   일
// 1주 주력 주력 주력 주력 주력 튼튼
// 2주 주력 주력 주력 주력 주력 튼튼
// 3주 주력 주력 주력 주력 주력 튼튼
// 4주 깊이 깊이 깊이 깊이 깊이 튼튼

// 이렇게 스케쥴을 짜게 되면 주력을 공부하다가도 깊이를 공부해야되지 않나? 튼튼을 공부해야되지 않나? 등 걱정을 없앨 수 있음

// 모듈을 구현할 때마다 crud 만들고, 필요한 게 있으면 구글링해서 간단하게만 정리하고, 바쁘니깐 돌아가게만 만드는 게 반복이다 보니
// 무엇이든 확실하게 사용할 줄 안다고 생각이 들지 않아서 학습 방법에 대해 고민하고 있었습니다.
// 이렇게 학습 방법을 바꿔서 효율적인 코드를 구현하고 성장할 수 있는 기반을 다질 수 있는 기회로 만들어 봐야겠습니다.

// 기존에 하던 것처럼 에러나 새로운 기능이 있다면 정리하면서 README에 카테고리를 리스트로 정리하고
// 반복되는 카테고리를 선정해서 주력으로 학습하는 기회를 가지고, 튼튼과 깊이는 위에 있는 리스트를 우선적으로 학습해보겠습니다.

// 이후에 주력으로는 어떤 것을 학습할지, 깊이와 튼튼은 어떻게 학습하고 있는 지 공유하겠습니다.