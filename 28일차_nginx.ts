// 부트캠프에서 react는 AWS s3에 node 서버는 Ec2를 이용해서 배포한 경험이 있습니다.
// 배포 방법이 다양하지만 부트캠프 당시에는 진도를 따라가는 것이 급급해서 다른 배포 방법을 학습하기보단 알려주는 걸 단기간 익히고 활용했습니다.

// 한정된 배포 지식과 경험을 가진 채 첫 회사에 입사를 했는데

// 현재 진행 중인 프로젝트가 지난 주에 1차 배포를 진행했는데 프론트엔드 팀에서 관리자 페이지는 s3에 배포하고 서비스 페이지는 Ec2를 통해서 배포되었습니다.

// 그래서 어떻게 Ec2로 배포를 진행하는 지 궁금했고, nginx를 이용해서 Ec2에서 배포한 것을 알게 되어 이번 기회에 nginx에 대해 알아보았습니다.

// nginx 공식페이지에서는 다음과 같이 설명하고 있습니다.

// 웹 서비스, 리버스 프록시, 캐싱, 로드 밸런싱, 미디어 스트리밍 등을 위한 오픈 소스 소프트웨어입니다.
// 중략 ...
// HTTP 서버 기능 외에도 이메일(IMAP, POP3, SMTP)을 위한 프록시 서버, HTTP, TCP 및 UDP 서버를 위한 역방향 프록시 및 로드 밸런서의 기능을 수행할 수 있습니다.
// 중략...
// 클라우드 네이티브 아키텍처를 위해 설계된 소프트웨어 전용 올인원 로드 밸런서, 웹 서버, API 게이트웨이 및 역방향 프록시인 NGINX는 IT 인프라 및 애플리케이션 현대화 작업을 가속화할 수 있도록 지원합니다.

// 조금 더 간단하게 nginx를 설명한다면 트래픽이 많은 웹 사이트의 서버(WAS)를 도와주는 비동기 이벤트 기반 구조의 웹 서버 프로그램이라 할 수 있습니다.

// WAS와 web server의 차이는 다음에 자세하게 알아보도록 하겠습니다.

// nginx에는 소켓에 요청이 들어오면 커넥션을 형성하고 처리하는 워커 프로세스와 설정 파일을 읽고 이러한 워커 프로세스를 생성하는 마스터 프로세스가 있습니다.
// 워커 프로세스의 커넥션은 keep alive 시간만큼 유지되며, 요청이 없으면 새로운 커넥션을 생성하거나 다른 커넥션의 요청을 처리합니다.

// nginx에서 이러한 커넥션 형성과 제거, 새로운 요청을 처리하는 것을 이벤트라고 부릅니다

// 자바스크립트 동작원리와 비슷하게 이러한 이벤트들은 OS 커널이 큐 형식으로 워커 프로세스에 전달하고, 이벤트는 큐에 담겨 비동기 방식으로 처리됩니다.
// 처리에 오랜 시간이 걸리는 작업은 스레드 풀을 통해서 처리됩니다.

// 이처럼 nginx는 이벤트를 기반으로 동작하는 Event-Driven-Model입니다.

// 워커 프로세스는 대게 CPU 코어 수만큼 생성하게 되며, 코어가 담당하는 프로세스를 바꾸는 횟수를 줄이기에 cpu의 컨텍스트 스위칭을 줄이게 됩니다.

// 이러한 이벤트 기반 구조는 개발자의 설정에 의해 마스터 프로세스가 워커 프로세스를 생성하여 기존의 워커 프로세스가 더 이상 커넥션을 형성하지 않도록 하여 처리하는 이벤트가 없으면
// 해당 프로세스를 종료시킬 수 있습니다.

// 이번 기회에는 nginx의 기능과 동작원리에 대해서 간단하게 알아봤는데, 다음에 기회가 된다면 개인 프로젝트 프론트 부분을 nginx로 ec2에 배포하는 기회를 가져보면서
// 더 자세하게 공유해보도록 하겠습니다.
